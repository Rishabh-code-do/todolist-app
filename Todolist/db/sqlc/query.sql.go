// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todo(title, description, dueDate, status, createdAt, updatedAt) 
VALUES ($1, $2, $3, $4,now(),now())
RETURNING id, title, description, duedate, status, createdat, updatedat
`

type CreateTodoParams struct {
	Title       string         `json:"title"`
	Description pgtype.Text    `json:"description"`
	Duedate     pgtype.Date    `json:"duedate"`
	Status      NullTaskStatus `json:"status"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, createTodo,
		arg.Title,
		arg.Description,
		arg.Duedate,
		arg.Status,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duedate,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :one
DELETE FROM todo WHERE id = $1
RETURNING id, title, description, duedate, status, createdat, updatedat
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, deleteTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duedate,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const getAllTodo = `-- name: GetAllTodo :many
SELECT id, title, description, duedate, status, createdat, updatedat FROM todo where status = 'PENDING'
`

func (q *Queries) GetAllTodo(ctx context.Context) ([]Todo, error) {
	rows, err := q.db.Query(ctx, getAllTodo)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Duedate,
			&i.Status,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodoById = `-- name: GetTodoById :one
SELECT id, title, description, duedate, status, createdat, updatedat FROM todo WHERE id = $1
`

func (q *Queries) GetTodoById(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, getTodoById, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duedate,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const markTodoAsCompleted = `-- name: MarkTodoAsCompleted :one
UPDATE todo SET status = 'COMPLETED', updatedAt = now()
WHERE id = $1
RETURNING id, title, description, duedate, status, createdat, updatedat
`

func (q *Queries) MarkTodoAsCompleted(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRow(ctx, markTodoAsCompleted, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duedate,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todo SET title = $1, description = $2, dueDate = $3,updatedAt = now()
WHERE id = $4
RETURNING id, title, description, duedate, status, createdat, updatedat
`

type UpdateTodoParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Duedate     pgtype.Date `json:"duedate"`
	ID          int32       `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.db.QueryRow(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.Duedate,
		arg.ID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Duedate,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}
